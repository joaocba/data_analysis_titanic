# correlation_analysis.py
import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from utils.visualization import get_color_palette, COLORS, set_plot_style, format_percentage


def show(data):
    """An√°lise de correla√ß√µes entre vari√°veis"""
    st.markdown("### An√°lise de Correla√ß√µes")

    st.markdown("""
    Nesta sec√ß√£o, iremos explorar as rela√ß√µes entre diferentes vari√°veis do conjunto de dados do Titanic.
    Poder√° visualizar as correla√ß√µes entre todas as vari√°veis, com foco especial nas 
    rela√ß√µes com a sobreviv√™ncia, al√©m de an√°lises detalhadas das correla√ß√µes mais significativas.
    """)

    # Selecionar vari√°veis num√©ricas
    numeric_vars = ['Survived', 'Pclass', 'Sex', 'Age', 'SibSp', 'Parch',
                    'Fare', 'FamilySize', 'IsAlone']
    correlation_data = data[numeric_vars]

    # Sec√ß√£o de Visualiza√ß√µes Principais
    st.markdown("### Visualiza√ß√µes Principais")
    tab1, tab2 = st.tabs(["Matriz de Correla√ß√£o", "Correla√ß√µes com Sobreviv√™ncia"])

    with tab1:
        _show_correlation_matrix(correlation_data)

    with tab2:
        _show_survival_correlations(correlation_data)

    # An√°lises Detalhadas
    st.markdown("### An√°lises Detalhadas")
    _show_detailed_analysis(data)

    # Conclus√µes
    st.markdown("### Conclus√µes")
    _show_insights()


def _show_correlation_matrix(correlation_data):
    """Apresenta matriz de correla√ß√£o entre todas as vari√°veis"""
    st.markdown("#### Matriz de Correla√ß√£o Geral")

    col1, col2 = st.columns([2, 1])

    with col1:
        # Calcular matriz de correla√ß√£o
        correlation_matrix = correlation_data.corr()

        # Criar mapa de calor
        fig, ax = plt.subplots(figsize=(10, 8))
        sns.heatmap(correlation_matrix,
                    annot=True,
                    cmap='RdYlBu_r',
                    center=0,
                    fmt='.2f',
                    square=True)

        plt.title('Matriz de Correla√ß√£o entre Vari√°veis',
                  pad=20, fontsize=14, fontweight='bold')
        plt.tight_layout()
        st.pyplot(fig)

    with col2:
        st.markdown("""
        **Interpreta√ß√£o das Correla√ß√µes:**
        - **1,0 a 0,7**: Correla√ß√£o forte positiva
        - **0,7 a 0,3**: Correla√ß√£o moderada positiva
        - **0,3 a -0,3**: Correla√ß√£o fraca
        - **-0,3 a -0,7**: Correla√ß√£o moderada negativa
        - **-0,7 a -1,0**: Correla√ß√£o forte negativa

        **Observa√ß√µes:**
        - Cores mais intensas indicam correla√ß√µes mais fortes
        - Azul indica correla√ß√£o positiva
        - Vermelho indica correla√ß√£o negativa
        """)


def _show_survival_correlations(correlation_data):
    """Apresenta correla√ß√µes espec√≠ficas com sobreviv√™ncia"""
    st.markdown("#### Correla√ß√µes com Sobreviv√™ncia")

    col1, col2 = st.columns([3, 2])

    with col1:
        # Calcular correla√ß√µes com sobreviv√™ncia
        survival_corr = correlation_data.corr()['Survived'].sort_values(ascending=False)

        # Criar DataFrame para exibi√ß√£o
        corr_df = pd.DataFrame({
            'Vari√°vel': [
                'Sobreviv√™ncia',
                'Sexo (F=1, M=0)',
                'Classe',
                'Tarifa',
                'A Viajar Sozinho',
                'Pais/Filhos',
                'Irm√£os/C√¥njuge',
                'Idade',
                'Dimens√£o da Fam√≠lia'
            ],
            'Correla√ß√£o': survival_corr.values,
            'For√ßa': [
                'Auto-correla√ß√£o',
                'Forte positiva',
                'Forte negativa',
                'Moderada positiva',
                'Fraca negativa',
                'Fraca positiva',
                'Fraca negativa',
                'Fraca negativa',
                'Muito fraca'
            ]
        })
        st.table(corr_df)

    with col2:
        st.markdown("""
        **Principais Factores:**

        üîµ **Impacto Positivo na Sobreviv√™ncia:**
        - Ser do sexo feminino
        - Pagar tarifa mais elevada
        - Viajar com pais/filhos

        üî¥ **Impacto Negativo na Sobreviv√™ncia:**
        - Classe mais baixa
        - Viajar sozinho
        - Idade mais avan√ßada
        """)


def _show_detailed_analysis(data):
    """Apresenta an√°lise detalhada das correla√ß√µes mais importantes"""
    tab1, tab2, tab3 = st.tabs([
        "Sexo vs. Classe",
        "Idade vs. Tarifa",
        "Fam√≠lia vs. Tarifa"
    ])

    with tab1:
        col1, col2 = st.columns([3, 1])
        with col1:
            _plot_sex_class_correlation(data)
        with col2:
            st.markdown("""
            **Observa√ß√µes:**
            - Maior propor√ß√£o de mulheres na 1.¬™ classe
            - 3.¬™ classe predominantemente masculina
            - Distribui√ß√£o mais equilibrada na 2.¬™ classe
            """)

    with tab2:
        col1, col2 = st.columns([3, 1])
        with col1:
            _plot_age_fare_correlation(data)
        with col2:
            st.markdown("""
            **Observa√ß√µes:**
            - Tarifas mais elevadas para passageiros mais velhos
            - Maior varia√ß√£o de tarifas na 1.¬™ classe
            - Padr√£o de sobreviv√™ncia mais claro por faixa de pre√ßo
            """)

    with tab3:
        col1, col2 = st.columns([3, 1])
        with col1:
            _plot_family_fare_correlation(data)
        with col2:
            st.markdown("""
            **Observa√ß√µes:**
            - Fam√≠lias maiores tendem a pagar tarifas mais elevadas
            - Poss√≠vel rela√ß√£o com cabinas maiores
            - Descontos para grupos podem influenciar
            """)


def _plot_sex_class_correlation(data):
    """Apresenta correla√ß√£o entre sexo e classe"""
    fig, ax = plt.subplots(figsize=(10, 6))

    # Verificar e limpar dados, removendo valores nulos
    data_cleaned = data[['Pclass', 'Sex']].dropna()

    # Calcular percentagens por classe e sexo
    class_sex_dist = pd.crosstab(data_cleaned['Pclass'], data_cleaned['Sex'], normalize='index') * 100

    # Apresentar gr√°fico de barras com as percentagens
    class_sex_dist.plot(kind='bar',
                        ax=ax,
                        color=[COLORS['negative'], COLORS['primary']],
                        width=0.8,
                        edgecolor='white')

    # Ajustar t√≠tulo e r√≥tulos
    ax.set_title('Distribui√ß√£o de G√©nero por Classe', fontsize=14, fontweight='bold')
    ax.set_xlabel('Classe', fontsize=12)
    ax.set_ylabel('Percentagem (%)', fontsize=12)
    ax.set_xticklabels(['1.¬™ Classe', '2.¬™ Classe', '3.¬™ Classe'], fontsize=10)
    ax.tick_params(axis='y', labelsize=10)
    ax.tick_params(axis='x', rotation=0)
    ax.legend(['Masculino', 'Feminino'], fontsize=10)

    # Adicionar r√≥tulos nas barras
    for container in ax.containers:
        ax.bar_label(container, fmt='%.1f%%', label_type='center', color='black', fontweight='bold', fontsize=10)

    # Ajustar estilo do gr√°fico
    ax.grid(True, linestyle='--', alpha=0.7, color='#CCCCCC')

    # Apresentar gr√°fico no Streamlit
    st.pyplot(fig)


def _plot_age_fare_correlation(data):
    """Apresenta correla√ß√£o entre idade e tarifa"""
    fig, ax = plt.subplots(figsize=(10, 6))

    # Certificar-se de que 'Survived' tem valores consistentes
    data['Survived'] = data['Survived'].map({0: 'N√£o Sobreviveu', 1: 'Sobreviveu'})

    # Usar uma paleta de cores que combine com a legenda
    sns.scatterplot(data=data,
                    x='Age',
                    y='Fare',
                    hue='Survived',
                    palette=[COLORS['negative'], COLORS['primary']],
                    alpha=0.6)

    set_plot_style(
        ax,
        'Rela√ß√£o entre Idade e Tarifa',
        'Idade',
        'Tarifa (¬£)'
    )
    plt.legend(title='Sobreviv√™ncia')

    st.pyplot(fig)


def _plot_family_fare_correlation(data):
    """Apresenta correla√ß√£o entre dimens√£o da fam√≠lia e tarifa"""
    fig, ax = plt.subplots(figsize=(10, 6))

    # Verificar a rela√ß√£o entre FamilySize e Fare
    family_fare = data.groupby('FamilySize')['Fare'].mean().reset_index()

    # Ajustar a paleta de cores para um gradiente mais atraente
    palette = sns.color_palette("viridis", len(family_fare))

    # Apresentar a rela√ß√£o m√©dia entre dimens√£o da fam√≠lia e tarifa
    sns.barplot(data=family_fare,
                x='FamilySize',
                y='Fare',
                palette=palette,
                ax=ax)

    # Adicionar r√≥tulos nas barras para mostrar os valores da tarifa m√©dia
    for p in ax.patches:
        ax.annotate(f'{p.get_height():.2f}',
                    (p.get_x() + p.get_width() / 2., p.get_height()),
                    ha='center',
                    va='center',
                    fontsize=12,
                    color='black',
                    fontweight='bold',
                    xytext=(0, 5),
                    textcoords='offset points')

    # Melhorar o t√≠tulo, r√≥tulos e estilo
    ax.set_title('M√©dia das Tarifas por Dimens√£o da Fam√≠lia', fontsize=14, fontweight='bold')
    ax.set_xlabel('N√∫mero de Familiares', fontsize=12)
    ax.set_ylabel('Tarifa (¬£)', fontsize=12)
    ax.tick_params(axis='x', rotation=45, labelsize=10)
    ax.tick_params(axis='y', labelsize=10)
    ax.grid(True, linestyle='--', alpha=0.7, color='#CCCCCC')

    # Apresentar gr√°fico no Streamlit
    st.pyplot(fig)


def _show_insights():
    """Apresenta conclus√µes sobre as correla√ß√µes"""
    col1, col2 = st.columns(2)

    with col1:
        st.markdown("#### Factores Principais de Sobreviv√™ncia")
        st.markdown("""
        **1. Caracter√≠sticas Demogr√°ficas:**
        - **Sexo**: Principal factor de sobreviv√™ncia
        - **Classe Social**: Segundo factor mais importante
        - **Idade**: Impacto moderado, principalmente com outros factores

        **2. Factores Socioecon√≥micos:**
        - Forte rela√ß√£o entre tarifa e sobreviv√™ncia
        - Qualidade das acomoda√ß√µes influencia hip√≥teses
        - Padr√µes sociais reflectidos nas correla√ß√µes
        """)

    with col2:
        st.markdown("#### Padr√µes Sociais e Familiares")
        st.markdown("""
        **1. Estrutura Familiar:**
        - Fam√≠lias maiores em classes superiores
        - Apoio familiar como factor de sobreviv√™ncia
        - Rela√ß√£o entre dimens√£o da fam√≠lia e tarifa

        **2. Aspectos Socioecon√≥micos:**
        - Distribui√ß√£o demogr√°fica por classe
        - Padr√µes de viagem por grupo social
        - Rela√ß√£o entre idade e classe social
        """)

    st.divider()

    st.markdown("### üìù Conclus√µes Principais")
    st.markdown("""
    1. **Hierarquia de Factores:**
       - G√©nero e classe social como determinantes principais
       - Factores familiares com influ√™ncia moderada
       - Idade com impacto contextual

    2. **Interac√ß√µes Complexas:**
       - M√∫ltiplas vari√°veis interagindo simultaneamente
       - Padr√µes sociais reflectidos nos dados
       - Import√¢ncia da an√°lise multivariada
    """)

    st.divider()